#!/bin/bash
# there's a few commands and /help documents them

#set -eEuo pipefail
#trap 'echo "Error on line $LINENO"; read -rp "Press enter to exit..."; exit 1' ERR

# This is an OS X install-time hack
#@@INJECTPATH

tmp="$(python3 -c "import tempfile;print(tempfile.gettempdir())")"

[[ "$(uname)" == "Darwin" ]] && \
    CONFIG="Library/Application Support" ||\
    CONFIG=".config"
CONFIG="${HOME}/${CONFIG}/sidechat"

[[ -r "$CONFIG" ]] || mkdir -p "$CONFIG"
MDIR="$tmp"/sidechat
[[ -d "$MDIR" ]] || (mkdir "$MDIR" && chmod 0777 "$MDIR")
MDIR="$MDIR/$UID"
[[ -d "$MDIR" ]] || mkdir "$MDIR"
LAST="$MDIR/last.convo"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
HISTFILE="$MDIR/history"
HISTSIZE=1000
INJECT=
MDREAD=sd
LLM_MODEL=
[[ -r "$MDIR/DUI" ]] || echo OFF > "$MDIR/DUI"
DUI=$(< "$MDIR/DUI" )
DUIPROMPT='(Note: You are now in Do-Ur-Inspection mode: the contents of "command" code blocks with a syntax type AGENT will run. For example, ```AGENT\nls``` will run ls. Only run what is necessary. Remember, if you mention it N times, N things will run, so use it carefully. If you want the user to run something, do not use the special syntax. That is only for you. Your current path is '$PWD')'
CAPTURE="ON"
USECLIP=

[[ -r $HOME/.local/bin/sd ]] && MDREAD=$HOME/.local/bin/sd
[[ -f "$HISTFILE" ]] || touch "$HISTFILE"
history -r "$HISTFILE"
trap 'history -w "$HISTFILE"' EXIT
if [[ $(uname) == "Linux" ]]; then
  llm_config=".config"
else
  llm_config="Library/Application Support"
fi

[[ -n "$TMUX" ]] && my_id=$(tmux display-message -p '#{pane_id}') || my_id=

help() {
  if [[ "$#" -gt 0 ]]; then 
    {
        echo "### Parameters"
        echo "  * **System Prompt**:"
        echo "$SYSTEM" | sed 's/^/> /g'
        echo "  * **Model**: $LLM_MODEL"
        echo "  * **CID**: ${conv_id:-*(Not available until first message)*}"
        echo "  * **TMP**: $MDIR"
        echo -e "\n### Commands"

    } | $MDREAD
    system_prompt
  fi
  cat <<END
  /choose   - Switch pane capture focus.
  /clip     - Select text into the clipboard as context.
  /mindwipe - Forget this crazy world and start over.
  /model    - Switch model.
  /sshot    - Raster screenshot.
  /dui      - Toggle agentic. (current: $DUI)
  /capture  - Toggle capture. (current: $CAPTURE)
  shell-cmd | sc-add [-c cid] [prompt] - Add the output of shell-cmd to the context.
END
  if [[ "$#" -eq 0 ]]; then 
cat <<END
  /last     - Load the most recent conversation
  /flash    - Flash the focus
END
  fi
}

system_prompt() {
SYSTEM=$(cat <<END
You are an interactive debugging buddy in tmux talking to a highly competent engineer with decades of experience whose instincts are far better than yours. If they disagree with you, trust them and don't argue. Don't persist on things they insist are wrong. Your job is mostly either small things like syntax or arcane knowledge. It's generally not big sweeping architectural or design. Assume they've already tried the things a competent engineer would do. If they say you're wrong, you probably are.

You will get capture-pane -p followed by questions when the pane output changes. 
They are using $(uname -ar) and can change the capture focus. You will be notified when this happens and when our cid is established. These come in the form (Note: <message>).
They are using a markdown formatter. Only insert newlines into code braces for syntax.
They can do the following: $(help)
END
[[ "$DUI" == "ON" ]] && echo "$DUIPROMPT"
)
}

system_prompt
pane_id=${1-}
conv=
forcecapture=
debug=
[[ -r "$MDIR/${pane_id}.convo" ]] && conv_id=$(cat "$MDIR/${pane_id}.convo") || conv_id=

touch "$MDIR/${pane_id}.convo"
touch "$MDIR/${pane_id}.old"

flash() {
    if [[ -n "$TMUX" && -n "$pane_id" ]]; then
        tmux select-pane -t $pane_id -P 'bg=colour95'; sleep 0.03
        tmux select-pane -t $pane_id -P 'bg=color129'; sleep 0.03
        tmux select-pane -t $pane_id -P 'bg=default' 
        tmux select-pane -t $my_id
    fi
    set_prompt
}

setmodel() {
    LLM_MODEL="$1"
    echo "$LLM_MODEL" > "$CONFIG"/model
}

getmodel() {
    if [[ -r "$CONFIG/model" ]]; then
      LLM_MODEL=$(cat "$CONFIG/model")
    else
      if [[ -r "$HOME/$llm_config/io.datasette.llm/default_model.txt" ]]; then
        LLM_MODEL=$(cat "$HOME/$llm_config/io.datasette.llm/default_model.txt")
      else
        LLM_MODEL=$(llm models default)
        LLM_MODEL=$(echo "$LLM_MODEL" | cut -d '/' -f 3-)
      fi
      echo "$LLM_MODEL" > "$CONFIG"/model
    fi
}

getmodel

set_prompt() {
    local camera="â€” "
    local dui="â€” "
    local clipboard=''
    [[ -n "$TMUX" && $CAPTURE == "ON" ]] && camera="ðŸ“·"
    [[ $DUI == "ON" ]] && dui="ðŸš—"
    [[ -n "$USECLIP" ]] && clipboard='ðŸ“‹'
    prompt="${camera} ${dui}${clipboard} > "
}

choose() {
    [[ -z "$TMUX" ]] && return
    tmux display-panes -d 0 "run-shell 'echo %% > $MDIR/pane-id'"
    if [[ $? == "1" ]] ; then
        echo "Exiting due to possible infinite loop."
        exit 1
    fi
    if [[ -e $MDIR/pane-id ]]; then 
        pane_id=$(cat $MDIR/pane-id)
        echo "Using $pane_id"
        flash
        rm $MDIR/pane-id
        tmux select-pane -t $my_id
        touch $MDIR/${pane_id}.{convo,old}
        INJECT=" (Note: User changed focus to a new tmux pane)"
    else
        echo "Cancelled"
        return 1
    fi
    return 0
}

last() {
    amount=${1:-40}
    if [[ -z "$conv_id" ]]; then
        if [[ -s "$LAST" ]]; then
            conv_id=$( cat "$LAST" )
        else 
            conv_id=$(sqlite3 "$HOME/$llm_config/io.datasette.llm/logs.db" "select conversation_id from responses order by datetime_utc desc limit 1")
            echo "$conv_id" > "$LAST"
        fi
    fi
    { echo "# [ $conv_id ] "; llm logs list --cid $conv_id | tail -$amount; } | $MDREAD -c <(echo -e "[style]\nMargin = 4")
    conv="--cid $conv_id"
}

mindwipe() {
    echo "Memory has been wiped."
    system_prompt
    conv=
    conv_id=
    getmodel
    forcecapture=1
}

process_cmd() {
    infile="$1"
    n=$2
    local base="${infile}.${n}"
    {
        local llm_in="${base}-IN"
        local llm_parse="${base}-OUT"
        #echo $llm_in $llm_parse
        err=0

        for cmdfile in $(cat "$base" | "$DIR/simple-parse.py" -r '```AGENT\n(.*)```' -b "$llm_parse"); do
            #echo "## $cmdfile"
            if [[ $DUI == "ON" ]]; then
                cmd=$( < "$cmdfile" )
                cat "$cmdfile" | grep -v '^$' | tee -a "$llm_in" | sed 's/^/### /g' 
                echo '```bash'
                { echo "set -eEuo pipefail"; cat "$cmdfile"; } > "${cmdfile}.safe"
                {
                    bash "${cmdfile}.safe" | tee -a $llm_in | head -30
                    [[ $? -ne 0 ]] && err=$?
                }
                echo '```'
            else
                echo "~~ $match ~~ "
            fi
        done

        if [[ $err == 0 && $DUI == "ON" && -s "$llm_in" ]]; then
            (( n++ ))
            cat "$llm_in" | llm -m "$LLM_MODEL" "You ran Do-Ur-Inspection commands" $conv  | tee "${infile}.${n}"
        fi
    } | $MDREAD -c <(echo -e "[style]\nMargin = 4")
}

oneshot() {
    echo "$*" >> "$MDIR/input.txt"
    llm -m "$LLM_MODEL" "$*" -s "$SYSTEM" $conv >> "$MDIR/output.txt" &
}
    
capture() {
    if [[ $CAPTURE == "ON" ]]; then
        echo "Capturing off. Shades are drawn!"
        CAPTURE=OFF
        INJECT="$INJECT (Note: User turned capture off)"
    else
        while ! tmux list-panes -t "$pane_id" &>/dev/null; do
            echo "Woops, the pane disappeared. Choose another!"
            choose
        done

        flash
        echo "Capturing on. I see you!"
        INJECT="$INJECT (Note: User turned capture on)"
        CAPTURE=ON
    fi
}

clip_nvim() {
    nvim --headless --cmd "echo getreg('+')" --cmd "qa" 2>&1
}

clip() {
    USECLIP=
    local xclip=$(command -v xclip)
    local nvim=$(command -v nvim)
    local pbpaste=$(command -v pbpaste)
    local emacs=$(command -v emacsclient) 


    if [[ -n "$xclip" ]]; then
        for i in p c s; do 
            xclip -o -${i} > "$MDIR/clip.$i"
        done
    fi

    tmux show-buffer > "$MDIR/clip.tmux" 2> /dev/null

    if [[ -n "$pbpaste" ]]; then
       pbpaste > "$MDIR/clip.pbpaste"
    fi

    if [[ -n "$nvim" ]]; then
       clip_nvim > "$MDIR/clip.nvim"
    fi

    if [[ -n "$emacs" ]]; then
        emacsclient --eval '(current-kill 0)' > "$MDIR/clip.emacs" 2>/dev/null
    fi

    {
        echo "Select the text you want to send and I'll find out what clipboard it is, hopefully..."
        echo -n 'Supported: `tmux` '
        [[ -n "$nvim" ]]    && echo -n '`nvim` '    || echo -n '~~`nvim`~~ '
        [[ -n "$pbpaste" ]] && echo -n '`pbpaste` ' || echo -n '~~`pbpaste`~~ '
        [[ -n "$xclip" ]]   && echo -n '`xsel` '     || echo -n '~~`xsel`~~ '
        [[ -n "$emacs" ]]   && echo -n '`emacs` '    || echo -n '~~`emacs`~~ '
        echo
        echo
    } | $MDREAD
    
    while [[ 0 ]]; do
        if [[ -n "$xclip" ]]; then
            for i in p c s; do 
                if ! diff <(xclip -o -${i}) "$MDIR/clip.$i" > /dev/null; then
                    USECLIP="xclip -o -${i}"
                    break 2
                fi
            done
        fi

        if [[ -n "$emacs" ]]; then
            if ! diff <(emacsclient --eval '(current-kill 0)' 2>/dev/null) "$MDIR/clip.emacs" > /dev/null; then
                USECLIP="emacsclient --eval '(current-kill 0)' 2>/dev/null"
                break
            fi
        fi

        if [[ -n "$pbpaste" ]]; then
            if ! diff <(pbpaste) "$MDIR/clip.pbpaste" > /dev/null; then
                USECLIP=pbpaste
                break
            fi
        fi

        if [[ -n "$nvim" ]]; then
            if ! diff <(clip_nvim) "$MDIR/clip.nvim" > /dev/null; then
                USECLIP=clip_nvim
                break
            fi
        fi
        if ! diff <(tmux show-buffer 2>/dev/null) "$MDIR/clip.tmux" > /dev/null; then
            USECLIP="tmux show-buffer"
            break
        fi
        sleep 0.3
    done

    if [[ -n "$USECLIP" ]]; then
        {
            echo
            echo "Found!"
            echo "### Next prompt will use \`$USECLIP\`"
        } | $MDREAD
    else
        echo "Aborted"
    fi
}

dui() {
    if [[ "$DUI" == "ON" ]]; then
        DUI=OFF
        echo "Sobering up.";
        oneshot "(Note: Do-Ur-Inspection is now off. Do not talk about it. It no longer exists. Piping into sc-add is still available)"
    else
        DUI=ON
        echo "Fuck it, let's roll!"
        oneshot "$DUIPROMPT"
    fi
    echo $DUI > "$MDIR/DUI"
} 

set_prompt
ata=""
if [[ -n "$conv_id" ]]; then
    last 5
else
    echo "Conversation Start: Type /help for options"
fi
flash

emit_capture() {
    echo "<capture-pane -p>"
    cat "$MDIR/${pane_id}.new"
    echo -n "</capture-pane -p>"
}

while [ 0 ]; do 
    echo
    input=""
    pline="$prompt"
    while IFS= read -rep "$pline" line || exit; do
        if [[ "$line" == *\\ ]]; then
            input+="${line%\\}"
            input+=$'\n'
        else
            input+="$line"
            break
        fi
        pline="   |  "
    done
    [[ -z "$input" ]] && continue
    echo 

    _uuid=$(date +%s.%N)

    history -s "$input"  # Save to history
 
    if [[ $input =~ ^/ ]]; then
        if [[ $input == '/debug' ]]; then
            if [[ -n "$debug" ]]; then
                echo "Debug Off"
                debug=; set +x; 
            else
                echo "Debug On"
                debug=1; set -x; 
            fi
        elif [[ $input =~ ^/sshot ]]; then
            sshot=$(mktemp --suffix=.png -p "$MDIR")
            import $sshot
            ata="-a $sshot"
            echo "Next prompt will use your screenshot"
        elif [[ $input =~ (clip|capture|last|dui|mindwipe|choose|flash) ]]; then
            ${input:1}
        elif [[ $input == "/model" ]]; then
            chosen=$(llm models list | fzf-tmux | cut -d ':' -f 2- | cut -d ' ' -f 2 )
            if [[ -n "$chosen" ]]; then
              echo "Setting to $chosen"
              setmodel "$chosen"
              mindwipe
            fi
        else
            help 1
        fi
        set_prompt
        continue
    else
        text="$input"
    fi

    # synchronize input & output
    { echo -e "\n\n"; echo "$conv_id:${_uuid}"; } | tee -a "$MDIR/input.txt" | cat >> "$MDIR/output.txt"
    echo "($text)" >> "$MDIR/input.txt"

    if [[ -z "$USECLIP" && $CAPTURE == "ON" ]]; then
        while ! tmux capture-pane -t "${pane_id}" -p > "$MDIR/${pane_id}.new"; do
            echo "Choose another pane"
            choose
            if [[ $? == 1 ]]; then 
                echo "Ok fine, no capture, that's fine."
                capture
                set_prompt
                break
            fi
        done
    fi
    
    n=0
    in="$MDIR/${conv_id}_${_uuid}"
    {
       if [[ -n "$USECLIP" ]]; then
           $USECLIP
       elif [[ "$CAPTURE" == "ON" ]]; then
           _pid=$(tmux display -pt "$pane_id" '#{pane_pid}')
           {
                if [[ "$(uname)" == "Linux" ]]; then
                    echo "<ps hierarchy>$(ps -o comm= --ppid $_pid -p $_pid | tr '\n' ' ')</ps hierarchy>"
                fi

                if [[ -n "$forcecapture" ]]; then
                    emit_capture
                else
                    diff "$MDIR/${pane_id}.new" "$MDIR/${pane_id}.old" > /dev/null \
                        && echo \ || emit_capture 
                   cp "$MDIR/${pane_id}.new" "$MDIR/${pane_id}.old"
                fi
           } | grep -Ev "^$"         \
             | tee -a "$MDIR/input.txt"
      fi

    } | llm -m "$LLM_MODEL" "<user-query>${text}${INJECT}</user-query>" -s "$SYSTEM" $ata $conv \
      | tee "${in}.${n}" | tee "$MDIR/output.txt" \
      | $MDREAD -c <(echo -e "[style]\nMargin = 4")

    [[ -n "$USECLIP" ]]      && USECLIP=
    [[ -n "$forcecapture" ]] && forcecapture=
    set_prompt

    if [[ $DUI == "ON" ]]; then
        while true; do
            process_cmd "$in" $n
            (( n++ ))
            [[ -s "${in}.${n}" ]] || break
        done
    fi

    echo "${text}${INJECT}" >> "$MDIR/input.txt"

    INJECT=

    if [[ -z "$conv" ]]; then
        conv_id=$(sqlite3 "$HOME/$llm_config/io.datasette.llm/logs.db" "select conversation_id from responses order by datetime_utc desc limit 1")
        echo $conv_id > "$LAST"
        conv="--cid $conv_id"
        INJECT=" (Note: cid is $conv_id - there is no need to mention this)"
    fi
    echo $conv_id > "$LAST"
    ata=""
done
